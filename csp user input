class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def isSafe(self, v, colour, c):
        for i in range(self.V):
            if self.graph[v][i] == 1 and colour[i] == c:
                return False
        return True

    def graphColourUtil(self, m, colour, v):
        if v == self.V:
            return True

        for c in range(1, m + 1):
            if self.isSafe(v, colour, c):
                colour[v] = c
                if self.graphColourUtil(m, colour, v + 1):
                    return True
                colour[v] = 0

    def graphColouring(self, m):
        colour = [0] * self.V
        if not self.graphColourUtil(m, colour, 0):
            return False

        print("Solution exists, and the assigned colors are:")
        for c in colour:
            print(c, end=' ')
        return True


def main():
    num_vertices = int(input("Enter the number of vertices: "))
    g = Graph(num_vertices)

    print("Enter the adjacency matrix:")
    for i in range(num_vertices):
        row = list(map(int, input().split()))
        for j in range(num_vertices):
            g.graph[i][j] = row[j]

    m = int(input("Enter the number of colors: "))

    if g.graphColouring(m):
        print("Graph can be colored.")
    else:
        print("Graph cannot be colored.")


if __name__ == "__main__":
    main()
